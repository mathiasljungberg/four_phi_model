module m_system_3d_mc
  use parameters
  use m_system_3d
  use m_mc_parameters
  use m_averages
  use m_averages_func
  implicit none
  
contains

  subroutine monte_carlo(system, mc_params, mc_outp, av)
    type(system_3d), intent(inout):: system
    type(mc_parameters), intent(in):: mc_params
    type(mc_output), intent(inout):: mc_outp
    type(averages), intent(inout):: av

    integer:: i
    
    !step is to be understood at temp=1.0, scale accordingly
    !mc_params % step  = step * sqrt(temp)
    !mc_params % beta = 1.0_wp / (temp) ! 1.0_wp / (k_b * temp)
    
    !mc_outp % nsweeps = 0
    !mc_outp % nmoves = 0
    !mc_outp % acc = 0.0_wp
    !mc_outp % energy = Energy

    !do i=1, mc_params % nsweeps_eq
    !   call one_sweep(system, mc_params, mc_outp)
    !end do
    !
    !write(6,*) "mc_outp % nsweeps after equilibration", mc_outp % nsweeps
    !mc_outp % nsweeps = 0
    !mc_outp % nmoves = 0
    !mc_outp % acc = 0.0_wp

    !write(6,*) "av step after", av % av_step1,av % av_step1

    call system_3d_write_restart(system, mc_params % unit_restart, mc_params % restartfile)
    
    call initialize_averages_mc(system, av)

    do i=1, mc_params % nsweeps
       call one_sweep(system, mc_params, mc_outp)
       !write(6,*) "so far... collect", av % av_step1, av % av_step2
       call collect_averages_mc(system, av, mc_outp)

    end do
    
    write(6,*) "mc_outp % nsweeps after averaging", mc_outp % nsweeps
    
    call finalize_averages_mc(av)
    
    call print_averages_mc(system, av, mc_outp, mc_params)

    call system_3d_write_restart(system, mc_params % unit_restart, mc_params % restartfile)

  end subroutine monte_carlo


  subroutine one_sweep(system, mc_params, mc_outp)
    type(system_3d), intent(inout):: system
    type(mc_parameters), intent(in):: mc_params
    type(mc_output), intent(inout):: mc_outp

    real(kind=wp):: delta, de, threshold

    integer:: i

    ! perform one sweep
    call random_number(delta)
    do i=1, system % ndisp
       
       call random_number(delta)
       call random_number(threshold)
       delta = (2.0_wp * delta -1.0_wp)* mc_params % step
       !de = eval_delta_energy(system, i, delta)
       de = system_3d_get_delta_potential_energy(system, i, delta)
       
       if (exp( -mc_params % beta * de) .gt. threshold) then
          system % displacements(i) = system % displacements(i) + delta
          mc_outp % acc = mc_outp % acc +1.0_wp
          mc_outp % energy = mc_outp % energy + de
       end if

    end do

    mc_outp % nsweeps = mc_outp % nsweeps + 1 
    mc_outp % nmoves = mc_outp % nmoves +system % ndisp

  end subroutine one_sweep

  subroutine mc_initialize_files(mc_params, basename)
    type(mc_parameters), intent(inout):: mc_params
    character(*), intent(in):: basename

    character(80):: file

    file=".restart"
    file = trim(adjustl(basename)) //  trim(adjustl(file)) 

    mc_params % restartfile = file
    mc_params % unit_restart = 30

  end subroutine mc_initialize_files

end module m_system_3d_mc
