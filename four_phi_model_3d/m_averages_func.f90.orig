module m_averages_func
  use parameters
  use m_system_3d
  use m_mc_parameters
  use m_md_parameters
  use hist_class
  use m_averages
  implicit none
  
contains

  
  subroutine initialize_averages_mc(system, av)
    type(system_3d), intent(in):: system
    type(averages), intent(inout)::av

    av % nav1 =0
    av % nav2 =0
    
    allocate(av % displacements_tot(system % ndisp))
    allocate(av % displacements_tot2(system % ndisp))

    av % energy_tot = 0.0_wp
    !der1_tot = 0.0_wp
    !der2_tot = 0.0_wp
    !der3_tot = 0.0_wp
    !der4_tot = 0.0_wp
    !der11_tot = 0.0_wp
    !der13_tot = 0.0_wp
    !der22_tot = 0.0_wp
    av % displacements_tot = 0.0_wp
    av % displacements_tot2 = 0.0_wp

    ! initialize histograms
    call hist_init(av % hist_x1, 1000, -2.5_wp, 2.5_wp)
    call hist_init(av % hist_x2, 1000, -2.5_wp, 2.5_wp)
    call hist_init(av % hist_x3, 1000, -2.5_wp, 2.5_wp)

    if(av % av_dyn) then
       allocate(av % dyn_mat(system % ndisp, system % ndisp), &
            av % dyn_mat_tmp(system % ndisp, system % ndisp) )
       av % dyn_mat = 0.0_wp
       av % dyn_mat_tmp = 0.0_wp
    end if
    
  end subroutine initialize_averages_mc

   subroutine collect_averages_mc(system, av, mc_outp)
     type(system_3d), intent(in)::system
     type(averages), intent(inout)::av
     type(mc_output), intent(in)::mc_outp

     integer:: j
     complex(kind=wp):: array_q(3)


     if( mod(mc_outp % nsweeps, av % av_step1 ) .eq. 0 ) then


        av % nav1 = av % nav1 + 1

        ! get averages
        !Energy = Energy 
        !Energy =  system_1d_get_potential_energy(system)
        !der1 =  system_1d_get_derivative_1d(system, 1)
        !der2 =  system_1d_get_derivative_1d(system, 2)
        !der3 =  system_1d_get_derivative_1d(system, 3)
        !der4 =  system_1d_get_derivative_1d(system, 4)
        
        av % energy_tot = av % energy_tot + mc_outp % energy
        !der1_tot =  der1_tot + der1
        !der2_tot =  der2_tot + der2
        !der3_tot =  der3_tot + der3
        !der4_tot =  der4_tot + der4
        !der11_tot =  der11_tot + der1 ** 2
        !der13_tot =  der13_tot + der1 * der3
        !der22_tot =  der22_tot + der2 ** 2
        
        av % displacements_tot = av % displacements_tot + system % displacements
        av % displacements_tot2 = av % displacements_tot2 + system % displacements ** 2
        ! fill histograms    
        do j=1, system % nparticles
           call hist_add(av % hist_x1, system % displacements(3* (j-1) + 1), 1.0_wp )
           call hist_add(av % hist_x2, system % displacements(3* (j-1) + 2), 1.0_wp )
           call hist_add(av % hist_x3, system % displacements(3* (j-1) + 3), 1.0_wp )
        end do
        
     end if

     ! write order parameter Q(x_i) = 1/ N *sum x_i
     if( mod(mc_outp % nsweeps, av % av_step2 ) .eq. 0 ) then
        
        av % nav2 = av % nav2 + 1        
        
        call get_q_space(system % supercell, system % displacements, array_q, (/0.0_wp ,0.0_wp ,0.0_wp/) )
        write(8,*) mc_outp % nsweeps, dreal(array_q)

        if(av % av_dyn) then
           !call system_3d_get_dyn_mat(system, av % dyn_mat_tmp)
           call system_3d_get_fc(system, av % dyn_mat_tmp)
           av % dyn_mat = av % dyn_mat + av % dyn_mat_tmp
        end if
        
     end if
     
  end subroutine collect_averages_mc

  subroutine finalize_averages_mc(av)
     type(averages), intent(inout)::av
    ! type(mc_output), intent(in)::mc_outp

     av % energy_tot =  av % energy_tot / (av % nav1)
     !der1_tot =  der1_tot / (mc_outp % nmoves)
     !der2_tot =  der2_tot / (mc_outp % nmoves)
     !der3_tot =  der3_tot / (mc_outp % nmoves)
     !der4_tot =  der4_tot / (mc_outp % nmoves)
     !der11_tot =  der11_tot / (mc_outp % nmoves)
     !der13_tot =  der13_tot / (mc_outp % nmoves)
     !der22_tot =  der22_tot / (mc_outp % nmoves)

     av % displacements_tot = av % displacements_tot / (av % nav1)
     av % displacements_tot2 = av % displacements_tot2 / (av % nav1)

     if(av % av_dyn) then
        av % dyn_mat = av % dyn_mat / (av % nav1)
     end if
     
   end subroutine finalize_averages_mc
  
   subroutine print_averages_mc(system, av, mc_outp, mc_params)
     type(system_3d), intent(in)::system
     type(averages), intent(inout)::av
     type(mc_output), intent(in)::mc_outp
     type(hist):: hist_dyn_mat
! ji : needed to write proper susceptibility
     type(mc_parameters), intent(in)::mc_params
! ji end

     complex(kind=wp):: array_q(3), array_q2(3)    
     integer:: i
     integer:: ndisp
     real(kind=wp), allocatable:: eig(:), freq(:), eigvec(:,:)
     
     write(6,*) "Number of attempted moves", mc_outp % nmoves
     write(6,*) "Number of accepted moves", mc_outp % acc, "in per cent", (100.0_wp * mc_outp % acc) / mc_outp % nmoves, "%"
     write(6,*) "Average potential energy", av % energy_tot
     ! write(6,*) "Average first derivative", der1_tot
     ! write(6,*) "Average second derivative", der2_tot
     ! write(6,*) "Average third derivative", der3_tot
     ! write(6,*) "Average fourth derivative", der4_tot,  "times beta-1", der4_tot / mc_params % beta
     ! write(6,*) "Average squared first derivative", der11_tot, "times beta", der11_tot * mc_params % beta
     ! write(6,*) "Average squared second derivative", der22_tot
     ! write(6,*) "<V' * V'''>", der13_tot
     
     !do i=1, size(av % displacements_tot)
     !   write(7,*) i, av % displacements_tot(i) !system % displacements(i)
     !end do
     
     call get_q_space(system % supercell, av % displacements_tot , array_q, (/0.0_wp ,0.0_wp ,0.0_wp/) )
     
     write(6,*) "Order parameter", dreal(array_q)

     call get_q_space(system % supercell, av % displacements_tot2 , array_q2, (/0.0_wp ,0.0_wp ,0.0_wp/) )

! ji: modified to include beta=1/kT factor
!     write(6,*) "Susceptibility. <P^2> - <P>^2 ", dreal(array_q2) -dreal(array_q)**2  
     write(6,*) "Susceptibility. <P^2> - <P>^2 ", (dreal(array_q2) -dreal(array_q)**2 ) * mc_params % beta
! ji end

     !, sum(av % displacements_tot2) / system % nparticles - sum(av % displacements_tot)**2 / (system % nparticles ** 2)

    
     ! write histograms
     call hist_write(av % hist_x1, "histogram_x1.dat")
     call hist_write(av % hist_x2, "histogram_x2.dat")
     call hist_write(av % hist_x3, "histogram_x3.dat")
     
     ! diagonalize and write the average dynamical matrix (fc matrix now)
     if(av % av_dyn ) then
        write(6,*) "writing dynamical matrix"
        write(40,*) system % supercell
        write(40,*) av % dyn_mat
        write(6,*) "Done"
        
        if (.false.) then

           ! diagonalize
           ndisp = size(av % dyn_mat,1)        
           allocate(eig(ndisp),eigvec(ndisp,ndisp), freq(ndisp))
           call diagonalize(av % dyn_mat, eig, eigvec)
           
           write(6,*) "diagonalized average dynamical matrix"
           
           open(41, file="average_dyn_mat.dat", status="unknown")
           
           freq = sqrt(eig) !* hbar * cm
           do i=1, ndisp
              write(41,*) freq(i)
           end do
           
           close(41)
           
           ! put frequencies in histogram
           call hist_init(hist_dyn_mat, 1000, 0.0_wp, 10.0_wp)
           do i=1, ndisp
              call hist_add(hist_dyn_mat, freq(i), 1.0_wp)
           end do
           call hist_write(hist_dyn_mat, "histogram_dyn_mat.dat")
           
           deallocate(eig, eigvec)
        end if
     end if

   end subroutine print_averages_mc
  
  subroutine initialize_averages_md(system, av)
    type(system_3d), intent(in):: system
    type(averages), intent(inout)::av

    call initialize_averages_mc(system, av)

  end subroutine initialize_averages_md
  
  subroutine collect_averages_md(system, av, md_outp)
    type(system_3d), intent(in)::system
    type(averages), intent(inout)::av
    type(md_output), intent(in)::md_outp
    
    integer:: j
    complex(kind=wp):: array_q(3)

    if( mod(md_outp % nsteps, av % av_step1 ) .eq. 0 ) then    

      av % nav1 = av % nav1 + 1

       ! get averages
       !Energy = Energy 
       !Energy =  system_1d_get_potential_energy(system)
       !der1 =  system_1d_get_derivative_1d(system, 1)
       !der2 =  system_1d_get_derivative_1d(system, 2)
       !der3 =  system_1d_get_derivative_1d(system, 3)
       !der4 =  system_1d_get_derivative_1d(system, 4)
       
       av % energy_tot = av % energy_tot + system_3d_get_potential_energy(system)  
     
       !der1_tot =  der1_tot + der1
       !der2_tot =  der2_tot + der2
       !der3_tot =  der3_tot + der3
       !der4_tot =  der4_tot + der4
       !der11_tot =  der11_tot + der1 ** 2
       !der13_tot =  der13_tot + der1 * der3
       !der22_tot =  der22_tot + der2 ** 2
       
       av % displacements_tot = av % displacements_tot + system % displacements
       
       ! fill histograms    
       do j=1, system % nparticles
          call hist_add(av % hist_x1, system % displacements(3* (j-1) + 1), 1.0_wp )
          call hist_add(av % hist_x2, system % displacements(3* (j-1) + 2), 1.0_wp )
          call hist_add(av % hist_x3, system % displacements(3* (j-1) + 3), 1.0_wp )
       end do
       
       ! write order parameter Q(x_i) = 1/ N *sum x_i
       if( mod(md_outp % nsteps, av % av_step1) .eq. 0 ) then
          
          call get_q_space(system % supercell, system % displacements, array_q, (/0.0_wp ,0.0_wp ,0.0_wp/) )
          write(8,*) md_outp % nsteps, dreal(array_q)
          
       end if
     
    end if

  end subroutine collect_averages_md

  subroutine finalize_averages_md(av)
    type(averages), intent(inout)::av
 
    call finalize_averages_mc(av)

  end subroutine finalize_averages_md


   subroutine print_averages_md(system, av, md_outp)
     type(system_3d), intent(in)::system
     type(averages), intent(inout)::av
     type(md_output), intent(in)::md_outp
     
     complex(kind=wp):: array_q(3)    
     integer:: i

     
     write(6,*) "Number of steps", md_outp % nsteps
     write(6,*) "Average potential energy", av % energy_tot
     !write(6,*) "Number of attempted moves", mc_outp % nmoves
     !write(6,*) "Number of accepted moves", mc_outp % acc, "in per cent", (100.0_wp * mc_outp % acc) / mc_outp % nmoves, "%"
     !write(6,*) "Average potential energy", av % energy_tot
     
     ! write(6,*) "Average first derivative", der1_tot
     ! write(6,*) "Average second derivative", der2_tot
     ! write(6,*) "Average third derivative", der3_tot
     ! write(6,*) "Average fourth derivative", der4_tot,  "times beta-1", der4_tot / mc_params % beta
     ! write(6,*) "Average squared first derivative", der11_tot, "times beta", der11_tot * mc_params % beta
     ! write(6,*) "Average squared second derivative", der22_tot
     ! write(6,*) "<V' * V'''>", der13_tot
     
     do i=1, size(av % displacements_tot)
        write(7,*) i, av % displacements_tot(i) !system % displacements(i)
     end do
     
     call get_q_space(system % supercell, av % displacements_tot , array_q, (/0.0_wp ,0.0_wp ,0.0_wp/) )
     
     write(6,*) "Order parameter", dreal(array_q)

     ! write histograms
     call hist_write(av % hist_x1, "histogram_x1.dat")
     call hist_write(av % hist_x2, "histogram_x2.dat")
     call hist_write(av % hist_x3, "histogram_x3.dat")
     
   end subroutine print_averages_md



end module m_averages_func
