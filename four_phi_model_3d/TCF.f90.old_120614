program TCF
  use parameters
  use hist_class
  use FFT_m
  use m_system_3d
  implicit none

  character(80):: infile, outfile, units, file, string, filename
  integer:: ntsteps, nparticles, ndisp
  integer:: nqpoints_inp, nqpoints2, nqpoints
  real(kind=wp), allocatable:: qpoints_inp(:,:), qpoints(:,:)

  real(kind=wp), allocatable:: time(:), x(:), v(:), a(:), t_new(:) !tcf_1p_x(:,:), tcf_1p_v(:,:), tcf_1p_a(:,:),t_new(:) 
  !real(kind=wp), allocatable:: tcf_tot_x(:),tcf_tot_v(:),tcf_tot_a(:), sigma_x_real(:), sigma_x_imag(:), x_imag(:), 
  real(kind=wp),allocatable:: omega(:)
  real(kind=wp), allocatable:: sigma_v_real(:), sigma_v_imag(:),sigma_a_real(:), sigma_a_imag(:)

  complex(kind=wp), allocatable:: qpt_x(:,:,:,:), qpt_v(:,:,:,:), qpt_a(:,:,:,:), qpt_vH(:,:,:,:), tcf2(:,:,:), a_q(:)
  real(kind=wp), allocatable:: ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:), ft_tcf(:,:,:), S_of_q(:), ft_tcf_a_q(:) 
  integer:: cellnum, cell(3), supercell(3)

  integer:: i,j,k, n, q, j1,j2 
  integer:: npoints_pad, npoints_pad_pow, n_autocorr
  real(kind=wp):: qp(3), qp2(3), vec(3)
  real(kind=wp):: alpha, xl, dt, fwhm
  logical:: flag_tcf_x, flag_tcf_v, flag_tcf_a, flag_vanHove

  ! the program computes timce correlation functions and their fourier transforms
  ! using output generated by the four_phi_model_3d program
  
  ! read input
  read(5,*) infile
  read(5,*) outfile
  read(5,*) ntsteps
  read(5,*) fwhm
  read(5,*) units
  read(5,*) flag_tcf_x, flag_tcf_v, flag_tcf_a, flag_vanHove  
  read(5,*) nqpoints_inp, nqpoints2 

  allocate(qpoints_inp(nqpoints_inp,3))
  do i=1,nqpoints_inp
     read(5,*) qpoints_inp(i,:)
  end do 

  ! make the path in q-space
  nqpoints = (nqpoints_inp -1) * nqpoints2 +1
  allocate(qpoints(nqpoints,3)) !, band(nqpoints,3))
  
  n=1
  do i=1, nqpoints_inp-1
     vec = qpoints_inp(i+1,:) - qpoints_inp(i,:) 
     
     do j=1,nqpoints2
        qpoints(n,:) = qpoints_inp(i,:) + (dfloat(j-1) / nqpoints2) * vec
        n=n+1
     end do
  end do
  qpoints(nqpoints,:) = qpoints_inp(nqpoints_inp,:)
  
  n_autocorr = ntsteps  !/ 2
  
  allocate(time(ntsteps), t_new(n_autocorr) )
  
  open(10, file=infile, status="unknown", form="UNFORMATTED")
  
  ! read files
  do k=1, ntsteps     
     write(6,*) "Reading input file, step", k
     
     read(10) supercell, time(k)
     
     if (.not. allocated(x) ) then
        nparticles = product(supercell)
        ndisp = nparticles*3
        
        call allocate_things
        
     end if
     
     read(10)
     do j=1, nparticles
        read(10) x(3*(j-1)+1:3*(j-1)+3), v( 3*(j-1)+1:3*(j-1)+3), a(3*(j-1)+1:3*(j-1)+3)        
     end do ! j

     call get_q_space_all

  end do ! k
  
  close(10)


  ! atenuate with gaussian
  ! alpha = (fwhm  / (cm *hbar) ) ** 2 / (16.0_wp * log(2.0_wp) )  ! cm-1
  alpha = (fwhm ) ** 2 / (16.0_wp * log(2.0_wp) )  ! cm-1
  
  if(units .eq. "cm-1") then
    omega = alpha / (cm *hbar) ** 2
  end if

  ! new time for autocorr functions
  t_new=0.0_wp
  do i=1, n_autocorr
     t_new(i) = time(i)
  end do

  ! for fourier transform 
  call next_power_of_2(n_autocorr, npoints_pad, npoints_pad_pow)

  allocate(omega(npoints_pad))
  !allocate(x_imag(n_autocorr) )

  !x_imag=0.0_wp

  ! Omega
  dt = time(2)-time(1)
  xl = (npoints_pad-1) * dt
  do i =1, npoints_pad
     !omega(i) = 2 * pi * (i-1) / xl * (hbar /eV)  ! eV
     omega(i) = 2 * pi * (i-1) / xl !* (hbar * cm)  ! cm-1
  end do
  
  if(units .eq. "cm-1") then
     omega = omega * (hbar * cm)
  end if
  
  ! compute q-space TCF
  allocate(ft_tcf_real(npoints_pad,3,3), ft_tcf_imag(npoints_pad,3,3), tcf2(n_autocorr,3,3), ft_tcf(npoints_pad,3,3)  )
  allocate(S_of_q(npoints_pad), ft_tcf_a_q(npoints_pad), a_q(n_autocorr))
  
  do q=1, nqpoints

     if(flag_tcf_x) then

        !call q_space_TCF(qpt_x(q,:,:,2), qpt_x(q,:,:,1), tcf2(:,:,:), ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:) )                  
        !
        !
        !do j1=1,3
        !   do j2=j1,3
        !      ft_tcf(:, j1,j2) = ft_tcf_real(:,j1,j2) !- dreal( sum(qpt_x(q,:,j1,2)) *  sum(qpt_x(q,:,j2,1))  + &
        !          ! (sum(qpt_x(q,:,j1,2))**2 + sum(qpt_x(q,:,j2,1))**2) ) / ntsteps ** 2
        !   end do
        !end do
        !
        !filename="ft_tcf_x" 
        !call write_files(filename, q, qpoints(q,:), ft_tcf )

        ! FFT way
        a_q = 0.0_wp
        do j1=1,3
           a_q = a_q + qpoints(q,j1) * qpt_x(q,1:n_autocorr,j1,1)
        end do

        call q_space_TCF_FFT(a_q, ft_tcf_a_q)

        filename="ft_tcf_a_q" 
        call string_int_concatenate(filename,q)
        call string_string_concatenate(filename,".dat")     
        call write_file(filename, qpoints(q,:), ft_tcf_a_q )        

       !! neutron scattering
       !S_of_q = 0.0_wp
       !do j1=1,3
       !   S_of_q = S_of_q + qpoints(q,j1) * qpoints(q,j1) * ft_tcf(:, j1,j1)
       !   do j2=j1+1,3
       !      S_of_q = S_of_q + 2.0_wp* qpoints(q,j1) * qpoints(q,j2) * ft_tcf(:, j1,j2)
       !   end do
       !end do
       !
       !filename="S_of_q" 
       !call string_int_concatenate(filename,q)
       !call string_string_concatenate(filename,".dat")     
       !call write_file(filename, qpoints(q,:), S_of_q )
       !
       !

     end if

     !if(flag_tcf_v) then
     !
     !   call q_space_TCF(qpt_v(q,:,:,2), qpt_v(q,:,:,1), tcf2(:,:,:), ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:) )                  
     !
     !   ft_tcf = ft_tcf_real
     !
     !   filename="ft_tcf_v" 
     !   call write_files(filename, q, qpoints(q,:), ft_tcf )
     !
     !end if
     !
     !if(flag_tcf_a) then
     !
     !   call q_space_TCF(qpt_a(q,:,:,2), qpt_a(q,:,:,1), tcf2(:,:,:), ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:) )                  
     !
     !   ft_tcf = ft_tcf_real
     !
     !   filename="ft_tcf_a" 
     !   call write_files(filename, q, qpoints(q,:), ft_tcf )
     !
     !end if
     
     if(flag_vanHove) then
        
        !call q_space_TCF(qpt_vH(q,:,:,2), qpt_vH(q,:,:,1), tcf2(:,:,:), ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:) )                  

        ! FFT way
        a_q =  qpt_x(q,1:n_autocorr,j1,1)
        
        call q_space_TCF_FFT(a_q, ft_tcf_a_q)

        !filename="ft_tcf_a_q" 
        filename="ft_tcf_vH" 
        call string_int_concatenate(filename,q)
        call string_string_concatenate(filename,".dat")     
        call write_file(filename, qpoints(q,:), ft_tcf_a_q )        

        !ft_tcf = ft_tcf_real


        !call write_files(filename, q, qpoints(q,:), ft_tcf )
     
     end if

  end do

contains

  subroutine string_int_concatenate(string, int)
    character(80), intent(inout):: string
    integer, intent(in):: int
    
    character(80):: string2

    write(string2,*) int
    string = trim(adjustl(string)) //  "_" // trim(adjustl(string2)) 
    
  end subroutine string_int_concatenate

  subroutine string_string_concatenate(string, string2)
    character(80), intent(inout):: string
    character(*), intent(in):: string2
        
    string = trim(adjustl(string)) // trim(adjustl(string2)) 
    
  end subroutine string_string_concatenate

  
  subroutine write_files(filename, q, qpoint, array)
    character(80), intent(in)::filename
    real(kind=wp), intent(in):: array(:,:,:), qpoint(3)
    integer, intent(in):: q

    character(80):: file

    do j1=1,3
       do j2=j1,3
          file = filename
          call string_int_concatenate(file,q)
          call string_int_concatenate(file,j1)
          call string_int_concatenate(file,j2)
          call string_string_concatenate(file,".dat")
          call write_file(file, qpoint, array(:,j1,j2))
       end do
    end do
    
  end subroutine write_files
  
  subroutine write_file(filename, qpoint, array)
    character(*), intent(in)::filename
    real(kind=wp), intent(in):: array(:), qpoint(3)

    character(80):: file, string

    open(10,file=filename,status='unknown')
     
     write(10,*) "# ", qpoint !s(q,:) 

     do i =1, npoints_pad
        write(10,'(4ES18.10)') omega(i) , array(i) !sigma_qpt_vq_real(q,i,:) 
     end do

     close(10)

  end subroutine write_file
  
  ! naive autocorrelation function, scales as N^2
  subroutine autocorrelation(x_in, x_autocorr)
    implicit none 
    ! passed variables
    real(kind=wp), intent(in), dimension(:)::  x_in
    real(kind=wp), intent(out), dimension(:):: x_autocorr
    !local variables
    integer:: x_in_size, x_autocorr_size
    integer:: i,j 


    ! assumes q and -q in index 1 and 2 of second dimension of x

    x_in_size = size(x_in)
    x_autocorr_size = size(x_autocorr)

    ! check dimensions
    if ( 2 * x_autocorr_size .gt. x_in_size ) then
       write(6,*) " the dimension of x_autocorr cannot be larger than half of x_in!"
       stop
    end if
         
    ! compute autocorrelation function
    x_autocorr = 0.0_wp
    do i=1,x_autocorr_size
       do j=1,x_autocorr_size
          x_autocorr(i) = x_autocorr(i) + x_in(j) * x_in(j+i-1)
       end do
    end do

    ! normalize
    !x_autocorr = x_autocorr / x_autocorr(1)

  end subroutine autocorrelation

  subroutine correlation_complex(x_in1, x_in2, x_autocorr)
    implicit none 
    ! passed variables
    complex(kind=wp), intent(in), dimension(:)::  x_in1, x_in2
    complex(kind=wp), intent(out), dimension(:):: x_autocorr
    !local variables
    integer:: x_in_size, x_autocorr_size
    integer:: i,j 

    x_in_size = size(x_in1)
    x_autocorr_size = size(x_autocorr)

    ! check dimensions
    if ( 2 * x_autocorr_size .gt. x_in_size ) then
       write(6,*) " the dimension of x_autocorr cannot be larger than half of x_in!"
       stop
    end if
         
    ! compute autocorrelation function
    x_autocorr = 0.0_wp
    do i=1,x_autocorr_size
       do j=1,x_autocorr_size
          x_autocorr(i) = x_autocorr(i) + x_in1(j) * x_in2(j+i-1)
       end do
    end do

    ! normalize
    !x_autocorr = x_autocorr / x_autocorr(1)

  end subroutine correlation_complex
 
subroutine get_q_space_3(supercell, x_inp, qp, q_out)
  integer,intent(in):: supercell(3)
  real(kind=wp), intent(in) :: x_inp(:)
  real(kind=wp), intent(in) :: qp(3)
  complex(kind=wp), intent(out):: q_out(3)

  integer:: i,ii

  nparticles = product(supercell)
  
  do i=0, nparticles-1

     ii = 3 * i
     call cellnum_to_cell(supercell, i, cell)

     q_out = q_out + x_inp(ii + 1: ii +3) * &
          exp(dcmplx(0, 2.0_wp * pi * dot_product(qp, dfloat(cell))   ) )
  end do

end subroutine get_q_space_3


subroutine get_q_space_vanHove(supercell, x_inp, qp, q_out)
  integer,intent(in):: supercell(3)
  real(kind=wp), intent(in) :: x_inp(:)
  real(kind=wp), intent(in) :: qp(3)
  complex(kind=wp), intent(out):: q_out(:)

  integer:: i,ii

  nparticles = product(supercell)
  
  do i=0, nparticles-1

     ii = 3 * i
     call cellnum_to_cell(supercell, i, cell)

     q_out = q_out + &
          exp(dcmplx(0,  2.0_wp * pi * dot_product(qp, x_inp(ii + 1: ii +3) / 2.5_wp + dfloat(cell)) ) ) !-1.0_wp
  end do

end subroutine get_q_space_vanHove

subroutine allocate_things

  allocate(x(ndisp), v(ndisp), a(ndisp) )

  allocate(qpt_x(nqpoints, ntsteps,3,2), &
       qpt_v(nqpoints, ntsteps,3,2), &
       qpt_a(nqpoints, ntsteps,3,2), &
       qpt_vH(nqpoints, ntsteps,3,2))

end subroutine allocate_things



subroutine get_q_space_all

  do q=1, nqpoints
     qp = qpoints(q,:)  
     qp2 = -qp 

     call get_q_space_3(supercell, x(:), qp, qpt_x(q,k,:,1))
     call get_q_space_3(supercell, v(:), qp, qpt_v(q,k,:,1))
     call get_q_space_3(supercell, a(:), qp, qpt_a(q,k,:,1))
     call get_q_space_vanHove(supercell, x(:), qp, qpt_vH(q,k,:,1))
     
     call get_q_space_3(supercell, x(:), qp2, qpt_x(q,k,:,2))
     call get_q_space_3(supercell, v(:), qp2, qpt_v(q,k,:,2))
     call get_q_space_3(supercell, a(:), qp2, qpt_a(q,k,:,2))
     call get_q_space_vanHove(supercell, x(:), qp2, qpt_vH(q,k,:,2))


  end do ! q

end subroutine get_q_space_all

subroutine FT(func_in, func_out_real, func_out_imag)
  complex(kind=wp), intent(in)::func_in(:)
  real(kind=wp), intent(out)::func_out_real(:), func_out_imag(:)
  
  complex(kind=wp), allocatable :: func(:)
  
  !allocate(func(size(func_in)) )

  ! broadening
  !func = func_in * exp(-alpha * t_new(1:n_autocorr) ** 2)
  !func = func / func(1)
  
  ! FT
  call FFT(dreal(func_in),dimag(func_in) , func_out_real(:), func_out_imag(:), 1)

  !deallocate(func)

end subroutine FT

subroutine q_space_TCF(x1, x2, tcf2, ft_tcf_real, ft_tcf_imag)
  complex(kind=wp), intent(in):: x1(:,:), x2(:,:)
  complex(kind=wp), intent(out):: tcf2(:,:,:) 
  real(kind=wp), intent(out):: ft_tcf_real(:,:,:), ft_tcf_imag(:,:,:)

  integer:: j1,j2

  tcf2 = 0.0_wp
  ft_tcf_real= 0.0_wp
  ft_tcf_imag= 0.0_wp
  
  do j1=1,3
     do j2=j1,3
        call correlation_complex(x1(:,j1), x2(:,j2), tcf2(:,j1,j2))  
        call FT(tcf2(:,j1,j2), ft_tcf_real(:,j1,j2), ft_tcf_imag(:, j1,j2))  
        if (j1 .ne. j2) then
           tcf2(:,j2,j1) = tcf2(:,j1,j2)
           ft_tcf_real(:,j2,j1) = ft_tcf_real(:,j1,j2)
           ft_tcf_imag(:,j2,j1) = ft_tcf_imag(:,j1,j2)
        end if
     end do
  end do

end subroutine q_space_TCF

subroutine q_space_TCF_FFT(x1, ft_tcf)
  complex(kind=wp), intent(in):: x1(:)
  !complex(kind=wp), intent(out):: tcf2(:,:,:) 
  real(kind=wp), intent(out):: ft_tcf(:)

  real(kind=wp), allocatable:: ft_tcf_real(:), ft_tcf_imag(:)
  integer:: j1,j2
  
  write(6,*) size(x1),size(ft_tcf)

  allocate(ft_tcf_real(size(ft_tcf)), ft_tcf_imag(size(ft_tcf)))
  
  call FFT( dimag(x1), dreal(x1), ft_tcf_real, ft_tcf_imag,1)  

  ft_tcf = ft_tcf_real**2 + ft_tcf_imag**2

  deallocate(ft_tcf_real, ft_tcf_imag)

end subroutine q_space_TCF_FFT

end program TCF
