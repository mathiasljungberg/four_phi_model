program bandstructure
  use parameters
  use m_system_3d
  implicit none

  character(80):: infile, basename
  integer:: nqpoints_inp, nqpoints2, nqpoints
  real(kind=wp), allocatable:: qpoints_inp(:,:), qpoints(:,:)
  real(kind=wp), allocatable:: fc(:,:), band(:,:)
  
  complex(kind=wp):: fc_q(3,3)
  real(kind=wp):: fc_q_real(3,3), eig(3), eigvec(3,3)
  real(kind=wp):: qp(3), vec(3)
  integer:: supercell(3), cell1(3), cell2(3), cell12(3)
  integer:: ndisp, cellnum1, cellnum2
  integer:: i,j, i1,i2,i3,i4,i5,q,n, R, R_max, sign1, sign2, sign3, f1,f2, f3, j1,j2,j3

  ! read input
  read(5,*) infile
  read(5,*) basename
  read(5,*) nqpoints_inp, nqpoints2 
  
  allocate(qpoints_inp(nqpoints_inp,3))
  do i=1,nqpoints_inp
     read(5,*) qpoints_inp(i,:)
  end do
  
  ! read dynamical matrix
  open(unit=10, file=infile, status='old')
  
  read(10,*) supercell
  ndisp =3*product(supercell)
  allocate( fc(ndisp, ndisp))
  
  read(10,*) fc
  
  close(10)

  
  ! make the path in q-space
  nqpoints = (nqpoints_inp -1) * nqpoints2 +1
  allocate(qpoints(nqpoints,3), band(nqpoints,3))
  
  
  n=1
  do i=1, nqpoints_inp-1
     vec = qpoints_inp(i+1,:) - qpoints_inp(i,:) 
     
     do j=1,nqpoints2
        qpoints(n,:) = qpoints_inp(i,:) + (dfloat(j-1) / nqpoints2) * vec
        n=n+1
     end do
  end do
  qpoints(nqpoints,:) = qpoints_inp(nqpoints_inp,:)

  write(6,*) "q-points"
  do i=1, nqpoints
     write(6,*) qpoints(i,:)
  end do

  !do i=-1,1,2
  !   write(6,*) "i", i
  !end do
  !
  !do i=1,1,2
  !   write(6,*) "i2",i
  !end do
  !
  !stop

  R_max=min(3, maxval(supercell/2)-1)

  write(6,*) "R_max", R_max
  ! now calculate the band structure for each q-point
  do q=1, nqpoints
     qp = qpoints(q,:)
     
     fc_q = 0.0_wp     
     
     write(11,*)
     write(11,*) "qpoint", qp
     
     ! average over all centers to get good statistics
     do j1 = 0, supercell(1)-1 
        do j2 = 0, supercell(2)-1 
           do j3 = 0, supercell(3)-1 

              cell1 = (/j1,j2,j3/)

              call cell_to_cellnum(supercell, cell1, cellnum1)
     
              ! loop over all vectors with R .le. R_max
              do R= 0, R_max
                 do i1=0, R
                    do i2=0, R - i1
                       i3 = R - i1 -i2
                       
                       ! negative numbers too, for nonzero i1,i2,i3
                       if(i1 .eq. 0) then
                          f1 = 1
                       else
                          f1= -1
                       end if
                       
                       if(i2 .eq. 0) then
                          f2 = 1
                       else
                          f2= -1
                       end if
                       
                       if(i3 .eq. 0) then
                          f3 = 1
                       else
                          f3= -1
                       end if
                       
                       do sign1 = f1,1,2
                          do sign2 = f2,1,2
                             do sign3 = f3,1,2
                                
                                
                                cell12 = (/sign1 * i1, sign2 * i2, sign3 * i3/)
                                cell2 = cell1 + cell12
                                
                                call cell_to_cellnum(supercell, cell2, cellnum2)
                                
                                !call pbc(supercell, cell, cell_new)
                                
                                !write(6,*) "R_max, R", R_max, R
                                !write(6,*) "i1,i2,i3", i1,i2,i3
                                !write(6,*) "cell", cell
                                !write(6,*) "cellnum", cellnum
                                
                                !write(6,*) "cell_new", cell_new
                                
                                do i4=1,3
                                   do i5=1,3
                                      
                                      fc_q(i4,i5) = fc_q(i4,i5) + fc(3 *cellnum1 + i4, 3 * cellnum2 + i5 ) * &
                                           exp(dcmplx(0, 2.0_wp * pi * dot_product(qp, dfloat(cell12))   ) )
                              
                                   end do !i5
                                end do !i4
                        
                                ! end do!i3 
                                !end do!i2
                                !end do !i1
                                
                             end do ! sign3
                          end do ! sign2
                       end do ! sign1
                    end do !i2
                 end do ! i1
              end do ! R
              
           end do ! j3
        end do ! j2
     end do ! j1
     
     !write(11,*) fc_q

     fc_q = fc_q / product(supercell)

     if( maxval(abs(imag(fc_q))) .gt. 1.0e-10 ) then
        write(6,*) "Error, complex fq_q!"
        stop
     else
        fc_q_real = dreal(fc_q)
     end if

     ! symmetrize fc_q_real
     do i=1,3
        do j=i+1,3
           fc_q_real(i,j) =0.5_wp * (fc_q_real(i,j) + fc_q_real(j,1) )
           fc_q_real(j,i) = fc_q_real(i,j)
        end do
     end do


!    ! diagonalize 3x3 matrix
    call diagonalize(fc_q_real, eig, eigvec)

    do i=1,3
       if (real(eig(i)) .ge. 0) then
          band(q,i) = sqrt(eig(i))
       else
          band(q,i) = -sqrt(-eig(i))
       end if
    end do !i

    write(12,'(6ES18.10)') qp, band(q,:)
    
 end do !q
  

end program bandstructure
